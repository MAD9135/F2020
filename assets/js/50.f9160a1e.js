(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{410:function(t,e,a){"use strict";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("PageHeader"),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Main not Master to be the new default branch name")]),t._v(" "),a("p",[t._v("As of October 1, 2020, all new repositories created on GitHub will have the name of the default branch set to "),a("code",[t._v("main")]),t._v(" rather than the previous default name of "),a("code",[t._v("master")]),t._v(".")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Update to the latest version of git")]),t._v(" "),a("p",[t._v("Please "),a("a",{attrs:{href:"https://git-scm.com/download",target:"_blank",rel:"noopener noreferrer"}},[t._v("update your git cli"),a("OutboundLink")],1),t._v(" to version 2.28 or later.")]),t._v(" "),a("p",[t._v("This version introduced the ability to set the name of the default branch when creating a new repository. You can choose to set it manually using the "),a("code",[t._v("-b")]),t._v(" flag e.g.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git init -b main\n")])])]),a("p",[t._v("Or, you can set "),a("strong",[t._v("main")]),t._v(" to be the default in git global config. This will keep you consistent with the new GitHub defaults.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global init.defaultBranch main\n")])])])]),t._v(" "),a("h2",{attrs:{id:"initialize-a-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-a-project"}},[t._v("#")]),t._v(" Initialize a project")]),t._v(" "),a("p",[t._v("Create a new project folder (e.g. my-awesome-app) and turn it into a git repository.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" my-awesome-app\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" my-awesome-app\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init -b main\n")])])]),a("h3",{attrs:{id:"gitignore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),a("p",[t._v("The hidden file "),a("code",[t._v(".gitignore")]),t._v(" (don't forget the leading period) tells git which files and folders "),a("em",[t._v("should not")]),t._v(" be tracked for changes.")]),t._v(" "),a("p",[t._v("At the minimum your "),a("code",[t._v(".gitingnore")]),t._v(" file should include:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".DS_Store\nnode_modules\n")])])]),a("h3",{attrs:{id:"readme"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readme"}},[t._v("#")]),t._v(" README")]),t._v(" "),a("p",[t._v("Every git repo should have a good "),a("code",[t._v("README.md")]),t._v(" file to explain what the project is about and examples of how to use it.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('echo "# My awesome app" > README.md\n')])])]),a("p",[t._v("It obviously needs more detail than that. Check out "),a("a",{attrs:{href:"https://medium.com/@meakaakka/a-beginners-guide-to-writing-a-kickass-readme-7ac01da88ab3",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Beginners Guide to writing a Kickass README"),a("OutboundLink")],1),t._v(" for some advice/inspiration.")]),t._v(" "),a("h2",{attrs:{id:"stage-files-for-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stage-files-for-commit"}},[t._v("#")]),t._v(" Stage files for commit")]),t._v(" "),a("p",[t._v("Select individual files to be included in the next commit.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("Using the "),a("code",[t._v("-A")]),t._v(" or "),a("code",[t._v("--all")]),t._v(" flags will stage all the adds, modifies, and removes to match the current working tree.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n")])])]),a("h3",{attrs:{id:"stop-tracking-changes-on-a-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop-tracking-changes-on-a-file"}},[t._v("#")]),t._v(" Stop tracking changes on a file")]),t._v(" "),a("p",[t._v("Remove a file from the git tracking index, but not from the project folder. This is good for when you have accidentally forgotten to create a "),a("code",[t._v(".gitignore")]),t._v(" file and want to stop tracking files. e.g. "),a("code",[t._v("node_modules")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cached "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("FILENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"create-a-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-commit"}},[t._v("#")]),t._v(" Create a commit")]),t._v(" "),a("p",[t._v("Commit a change log for all staged files. Make sure to include a clear and descriptive message using the "),a("code",[t._v("-m")]),t._v(" flag. It is a good practice to start most commit messages with an action verb – "),a("em",[t._v("add, update, fix, remove")]),t._v(" – followed by the relevant feature or bug description.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD feature x'")]),t._v("\n")])])]),a("h2",{attrs:{id:"remote-repositories"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remote-repositories"}},[t._v("#")]),t._v(" Remote Repositories")]),t._v(" "),a("p",[t._v("It is usually the case that we want to link our local repository to some remotely hosted repo on GitHub, GitLab or BitBucket. If you have started your project by cloning a remote repository, then that link is already set. If not, you can add it with this command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("URL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("You can list the currently linked remote repo(s) with")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n")])])]),a("h3",{attrs:{id:"sync-your-local-commits-to-the-remote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-your-local-commits-to-the-remote"}},[t._v("#")]),t._v(" Sync your local commits to the remote")]),t._v(" "),a("p",[a("strong",[t._v("origin")]),t._v(" is the default name for the remote repo. "),a("strong",[t._v("main")]),t._v(" is the branch that you want to push. Git will try to push to a branch with the same name on the remote. These can be updated to match your specific project settings.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin main\n")])])]),a("p",[t._v("If you need to push to a different branch name on the remote, you can use this syntax "),a("code",[t._v("localBranch:remoteBranch")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin main:gh_pages\n")])])]),a("h2",{attrs:{id:"help"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#help"}},[t._v("#")]),t._v(" Help")]),t._v(" "),a("p",[t._v("Get quick reminders with "),a("code",[t._v("git help")]),t._v(" on the command line. For more detailed explanations, see the full "),a("a",{attrs:{href:"https://git-scm.com/doc",target:"_blank",rel:"noopener noreferrer"}},[t._v("git documentation"),a("OutboundLink")],1),t._v(" website. There is also a great cheat sheet at the "),a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atlassian git tutorial"),a("OutboundLink")],1),t._v(" site.")])],1)}),[],!1,null,null,null);e.default=r.exports}}]);